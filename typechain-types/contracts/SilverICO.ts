/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SilverICOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contributions"
      | "getPresaleRaised"
      | "owner"
      | "participate"
      | "presaleCap"
      | "presaleEndTime"
      | "presaleRate"
      | "presaleStartTime"
      | "renounceOwnership"
      | "silverDogeToken"
      | "transferOwnership"
      | "withdrawBNB"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Contribution" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "contributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPresaleRaised",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "silverDogeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBNB",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPresaleRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "presaleCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "silverDogeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNB",
    data: BytesLike
  ): Result;
}

export namespace ContributionEvent {
  export type InputTuple = [
    contributor: AddressLike,
    amount: BigNumberish,
    tokensPurchased: BigNumberish
  ];
  export type OutputTuple = [
    contributor: string,
    amount: bigint,
    tokensPurchased: bigint
  ];
  export interface OutputObject {
    contributor: string;
    amount: bigint;
    tokensPurchased: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SilverICO extends BaseContract {
  connect(runner?: ContractRunner | null): SilverICO;
  waitForDeployment(): Promise<this>;

  interface: SilverICOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contributions: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getPresaleRaised: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  participate: TypedContractMethod<[], [void], "payable">;

  presaleCap: TypedContractMethod<[], [bigint], "view">;

  presaleEndTime: TypedContractMethod<[], [bigint], "view">;

  presaleRate: TypedContractMethod<[], [bigint], "view">;

  presaleStartTime: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  silverDogeToken: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawBNB: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contributions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPresaleRaised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "participate"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "presaleCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "presaleEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "presaleRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "presaleStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "silverDogeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBNB"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Contribution"
  ): TypedContractEvent<
    ContributionEvent.InputTuple,
    ContributionEvent.OutputTuple,
    ContributionEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Contribution(address,uint256,uint256)": TypedContractEvent<
      ContributionEvent.InputTuple,
      ContributionEvent.OutputTuple,
      ContributionEvent.OutputObject
    >;
    Contribution: TypedContractEvent<
      ContributionEvent.InputTuple,
      ContributionEvent.OutputTuple,
      ContributionEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
