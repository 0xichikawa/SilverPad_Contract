/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SilverPadFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cryptoSIDADAO"
      | "daiToken"
      | "feeAmount"
      | "feeContributions"
      | "getSilvers"
      | "isSilver"
      | "launchNewICO"
      | "owner"
      | "paidSpamFilterFee"
      | "paySpamFilterFee"
      | "setDAOAddress"
      | "setOwner"
      | "silvers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ICOCreated" | "PaidSpamFilterFee"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cryptoSIDADAO",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "daiToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeContributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSilvers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSilver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "launchNewICO",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paidSpamFilterFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "paySpamFilterFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDAOAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "silvers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cryptoSIDADAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daiToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSilvers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSilver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "launchNewICO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paidSpamFilterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paySpamFilterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDAOAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "silvers", data: BytesLike): Result;
}

export namespace ICOCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    ico: AddressLike,
    projectURI: string,
    softcap: BigNumberish,
    hardcap: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    name: string,
    symbol: string,
    price: BigNumberish,
    decimal: BigNumberish,
    totalSupply: BigNumberish,
    tokenAddress: AddressLike,
    fundsAddress: AddressLike,
    lister: AddressLike
  ];
  export type OutputTuple = [
    creator: string,
    ico: string,
    projectURI: string,
    softcap: bigint,
    hardcap: bigint,
    startTime: bigint,
    endTime: bigint,
    name: string,
    symbol: string,
    price: bigint,
    decimal: bigint,
    totalSupply: bigint,
    tokenAddress: string,
    fundsAddress: string,
    lister: string
  ];
  export interface OutputObject {
    creator: string;
    ico: string;
    projectURI: string;
    softcap: bigint;
    hardcap: bigint;
    startTime: bigint;
    endTime: bigint;
    name: string;
    symbol: string;
    price: bigint;
    decimal: bigint;
    totalSupply: bigint;
    tokenAddress: string;
    fundsAddress: string;
    lister: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaidSpamFilterFeeEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SilverPadFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SilverPadFactory;
  waitForDeployment(): Promise<this>;

  interface: SilverPadFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cryptoSIDADAO: TypedContractMethod<[], [string], "view">;

  daiToken: TypedContractMethod<[], [string], "view">;

  feeAmount: TypedContractMethod<[], [bigint], "view">;

  feeContributions: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getSilvers: TypedContractMethod<[], [string[]], "view">;

  isSilver: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  launchNewICO: TypedContractMethod<
    [
      projectURI_: string,
      name_: string,
      symbol_: string,
      totalSupply_: BigNumberish,
      decimal_: BigNumberish,
      price_: BigNumberish,
      tokenAddress_: AddressLike,
      lister_: AddressLike,
      fundsAddress_: AddressLike,
      softcap_: BigNumberish,
      hardcap_: BigNumberish,
      endTime_: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paidSpamFilterFee: TypedContractMethod<
    [user_: AddressLike],
    [boolean],
    "view"
  >;

  paySpamFilterFee: TypedContractMethod<[], [void], "nonpayable">;

  setDAOAddress: TypedContractMethod<
    [cryptoSIDADAO_: AddressLike],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[owner_: AddressLike], [void], "nonpayable">;

  silvers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cryptoSIDADAO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "daiToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeContributions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSilvers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isSilver"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "launchNewICO"
  ): TypedContractMethod<
    [
      projectURI_: string,
      name_: string,
      symbol_: string,
      totalSupply_: BigNumberish,
      decimal_: BigNumberish,
      price_: BigNumberish,
      tokenAddress_: AddressLike,
      lister_: AddressLike,
      fundsAddress_: AddressLike,
      softcap_: BigNumberish,
      hardcap_: BigNumberish,
      endTime_: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paidSpamFilterFee"
  ): TypedContractMethod<[user_: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "paySpamFilterFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDAOAddress"
  ): TypedContractMethod<[cryptoSIDADAO_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[owner_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "silvers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "ICOCreated"
  ): TypedContractEvent<
    ICOCreatedEvent.InputTuple,
    ICOCreatedEvent.OutputTuple,
    ICOCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PaidSpamFilterFee"
  ): TypedContractEvent<
    PaidSpamFilterFeeEvent.InputTuple,
    PaidSpamFilterFeeEvent.OutputTuple,
    PaidSpamFilterFeeEvent.OutputObject
  >;

  filters: {
    "ICOCreated(address,address,string,uint256,uint256,uint256,uint256,string,string,uint256,uint256,uint256,address,address,address)": TypedContractEvent<
      ICOCreatedEvent.InputTuple,
      ICOCreatedEvent.OutputTuple,
      ICOCreatedEvent.OutputObject
    >;
    ICOCreated: TypedContractEvent<
      ICOCreatedEvent.InputTuple,
      ICOCreatedEvent.OutputTuple,
      ICOCreatedEvent.OutputObject
    >;

    "PaidSpamFilterFee(address,uint256)": TypedContractEvent<
      PaidSpamFilterFeeEvent.InputTuple,
      PaidSpamFilterFeeEvent.OutputTuple,
      PaidSpamFilterFeeEvent.OutputObject
    >;
    PaidSpamFilterFee: TypedContractEvent<
      PaidSpamFilterFeeEvent.InputTuple,
      PaidSpamFilterFeeEvent.OutputTuple,
      PaidSpamFilterFeeEvent.OutputObject
    >;
  };
}
